typedef unsigned int page_type;
typedef unsigned int count_type;
typedef short section_type;

extern void mynode_set_table_id (int table_id);
extern short mynode_get_node_order(void* node);
extern void mynode_set_node_order(void* node, short order);
extern count_type mynode_get_node_key_count(void* node);
extern count_type* mynode_get_node_key_count_addr(void* node);
extern void mynode_set_node_key_count(void* node, count_type key_count);
extern bool mynode_is_node_leaf(void* node);
extern void mynode_set_node_leaf(void* node, bool is_root);
extern count_type mynode_get_node_pages_count(void* node);
extern void mynode_set_node_pages_count(void* node, count_type pages_count);
extern page_type mynode_get_node_num_page(void* node);
extern void mynode_set_node_num_page(void* node, page_type num_page);
extern page_type mynode_get_node_el_key(void* node, count_type key_num);
extern void* mynode_get_node_el(void* node, count_type key_num);
extern void* mynode_get_node_child(void* node, count_type ind);
extern page_type mynode_get_node_child_page(void* node, count_type ind);
extern void mynode_set_node_child(void* node, count_type ind, void* childAddr);
extern page_type mynode_get_node_last_page_dumped(void* node);
extern void* mynode_get_node_last_addr_dumped(void* node);
extern void mynode_set_node_last_page_dumped(void* node, page_type last_page_dumped);
extern count_type mynode_get_node_num_pages_dumped(void* node);
extern void mynode_set_node_num_pages_dumped(void* node, count_type num_pages_dumped);
extern void* mynode_set_node_el(void* node, count_type ind, void* el);
extern void* mynode_set_node_elKey(void* node, count_type ind, void* elKey);
extern void* mynode_erase_node_el(void* node, count_type ind);
extern void* mynode_erase_node_elKey(void* node, count_type ind);
extern void mynode_set_fn_mark_asToBeFlushed ( void (*mypager_fn) (void*) ); 
extern int mynode_open_session(int element_size, short order, int key_size, const char* filename, bool readOnly);
extern void mynode_close_session();
extern short mynode_get_max_order(int element_size, int key_size);
extern void mynode_setNode (void* node, count_type key_count, bool leaf, count_type pages_count, page_type num_page, bool root);
extern void mynode_convert_to_root (void* nodeDest, void* nodeSource);
extern void mynode_convert_from_root (void* nodeDest, void* nodeSource, page_type num_page_dest);
extern void* mynode_get_root (bool* created);
extern void mynode_flush_cache_operation ();
extern void* mynode_get_node(void* nodeAddr, int level, bool new_node, bool internal, page_type* num_page_if_new);
extern void mynode_update_root_pages_count (void* node);
extern void* mynode_get_node_for_traverse_by_addr(void* nodeAddr, int* index);
extern void mynode_free_page (int index);
extern void mynode_erase_page (void* node);
extern void* mynode_set_node_child_from_node(void* nodeDest, count_type ind, void* nodeSource);
extern void* mynode_get_root_nodeAddr ();
extern page_type mynode_get_page_from_address(void* nodeAddr);
extern section_type mynode_get_section_from_address(void* nodeAddr);
extern void mynode_save_nodeAddr(void* nodeAddr);
extern void* mynode_get_saved_nodeAddr();
extern void mynode_dump_page (void* node);
extern void mynode_check ();
extern void* mynode_get_node_link(void* node);
extern void mynode_set_node_link(void* node, void* address);
extern void mynode_set_node_link_with_nodeAddr(void* nodeDest, void* nodeSource);
extern void mynode_resetRoot (void* node, count_type key_count, bool leaf, count_type pages_count, page_type num_page);
extern count_type mynode_get_node_num_pages_dumped_int(void* node);
extern void* mynode_get_addr_last_int_dumped (void* node);
extern int mynode_get_page_size ();
extern int mynode_get_internal_block(void* node);
extern void mynode_set_node_child_page(void* node, count_type ind, page_type num_page, bool defrag);
extern void mynode_set_node_link_page(void* node, page_type page, bool defrag);
extern page_type mynode_get_node_link_page(void* node);
extern page_type mynode_get_page_last_leaf_dumped(void* node);
extern void mynode_open_session_only_read_no_cache(int element_size, short order, int key_size, const char* filename);
extern void mynode_close_session_read_no_cache();
extern void* mynode_allocate_addr_for_leaf (int num_page);
extern void mynode_copy_addr (void* nodeAddrDest, void* nodeAddrSource);
extern void mynode_mark_asToBeFlushed (void* node);
extern int mynode_get_node_page_size(void* node);
